#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ElabDBMazzi
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="elaboratodbmazzi")]
	public partial class ElaboratoMazziDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definizioni metodo Extensibility
    partial void OnCreated();
    partial void InsertAccordi(Accordi instance);
    partial void UpdateAccordi(Accordi instance);
    partial void DeleteAccordi(Accordi instance);
    partial void InsertAlloggi(Alloggi instance);
    partial void UpdateAlloggi(Alloggi instance);
    partial void DeleteAlloggi(Alloggi instance);
    partial void InsertAmbiti(Ambiti instance);
    partial void UpdateAmbiti(Ambiti instance);
    partial void DeleteAmbiti(Ambiti instance);
    partial void InsertAziende(Aziende instance);
    partial void UpdateAziende(Aziende instance);
    partial void DeleteAziende(Aziende instance);
    partial void InsertCampi(Campi instance);
    partial void UpdateCampi(Campi instance);
    partial void DeleteCampi(Campi instance);
    partial void InsertCandidature(Candidature instance);
    partial void UpdateCandidature(Candidature instance);
    partial void DeleteCandidature(Candidature instance);
    partial void InsertCoperture(Coperture instance);
    partial void UpdateCoperture(Coperture instance);
    partial void DeleteCoperture(Coperture instance);
    partial void InsertIntermediari(Intermediari instance);
    partial void UpdateIntermediari(Intermediari instance);
    partial void DeleteIntermediari(Intermediari instance);
    partial void InsertLocatori(Locatori instance);
    partial void UpdateLocatori(Locatori instance);
    partial void DeleteLocatori(Locatori instance);
    partial void InsertPersone(Persone instance);
    partial void UpdatePersone(Persone instance);
    partial void DeletePersone(Persone instance);
    partial void InsertPrenotazioni(Prenotazioni instance);
    partial void UpdatePrenotazioni(Prenotazioni instance);
    partial void DeletePrenotazioni(Prenotazioni instance);
    partial void InsertRichieste(Richieste instance);
    partial void UpdateRichieste(Richieste instance);
    partial void DeleteRichieste(Richieste instance);
    partial void InsertSettori(Settori instance);
    partial void UpdateSettori(Settori instance);
    partial void DeleteSettori(Settori instance);
    partial void InsertStudenti(Studenti instance);
    partial void UpdateStudenti(Studenti instance);
    partial void DeleteStudenti(Studenti instance);
    partial void InsertTipologie(Tipologie instance);
    partial void UpdateTipologie(Tipologie instance);
    partial void DeleteTipologie(Tipologie instance);
    partial void InsertTirocini(Tirocini instance);
    partial void UpdateTirocini(Tirocini instance);
    partial void DeleteTirocini(Tirocini instance);
    #endregion
		
		public ElaboratoMazziDataClassesDataContext() : 
				base(global::ElabDBMazzi.Properties.Settings.Default.elaboratodbmazziConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ElaboratoMazziDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ElaboratoMazziDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ElaboratoMazziDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ElaboratoMazziDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Accordi> Accordi
		{
			get
			{
				return this.GetTable<Accordi>();
			}
		}
		
		public System.Data.Linq.Table<Alloggi> Alloggi
		{
			get
			{
				return this.GetTable<Alloggi>();
			}
		}
		
		public System.Data.Linq.Table<Ambiti> Ambiti
		{
			get
			{
				return this.GetTable<Ambiti>();
			}
		}
		
		public System.Data.Linq.Table<Aziende> Aziende
		{
			get
			{
				return this.GetTable<Aziende>();
			}
		}
		
		public System.Data.Linq.Table<Campi> Campi
		{
			get
			{
				return this.GetTable<Campi>();
			}
		}
		
		public System.Data.Linq.Table<Candidature> Candidature
		{
			get
			{
				return this.GetTable<Candidature>();
			}
		}
		
		public System.Data.Linq.Table<Coperture> Coperture
		{
			get
			{
				return this.GetTable<Coperture>();
			}
		}
		
		public System.Data.Linq.Table<Intermediari> Intermediari
		{
			get
			{
				return this.GetTable<Intermediari>();
			}
		}
		
		public System.Data.Linq.Table<Locatori> Locatori
		{
			get
			{
				return this.GetTable<Locatori>();
			}
		}
		
		public System.Data.Linq.Table<Persone> Persone
		{
			get
			{
				return this.GetTable<Persone>();
			}
		}
		
		public System.Data.Linq.Table<Prenotazioni> Prenotazioni
		{
			get
			{
				return this.GetTable<Prenotazioni>();
			}
		}
		
		public System.Data.Linq.Table<Richieste> Richieste
		{
			get
			{
				return this.GetTable<Richieste>();
			}
		}
		
		public System.Data.Linq.Table<Settori> Settori
		{
			get
			{
				return this.GetTable<Settori>();
			}
		}
		
		public System.Data.Linq.Table<Studenti> Studenti
		{
			get
			{
				return this.GetTable<Studenti>();
			}
		}
		
		public System.Data.Linq.Table<Tipologie> Tipologie
		{
			get
			{
				return this.GetTable<Tipologie>();
			}
		}
		
		public System.Data.Linq.Table<Tirocini> Tirocini
		{
			get
			{
				return this.GetTable<Tirocini>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accordi")]
	public partial class Accordi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodAccordo;
		
		private System.DateTime _DataInizio;
		
		private System.DateTime _DataFine;
		
		private int _CodStudente;
		
		private int _CodTirocinio;
		
		private EntityRef<Studenti> _Studenti;
		
		private EntityRef<Tirocini> _Tirocini;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodAccordoChanging(int value);
    partial void OnCodAccordoChanged();
    partial void OnDataInizioChanging(System.DateTime value);
    partial void OnDataInizioChanged();
    partial void OnDataFineChanging(System.DateTime value);
    partial void OnDataFineChanged();
    partial void OnCodStudenteChanging(int value);
    partial void OnCodStudenteChanged();
    partial void OnCodTirocinioChanging(int value);
    partial void OnCodTirocinioChanged();
    #endregion
		
		public Accordi()
		{
			this._Studenti = default(EntityRef<Studenti>);
			this._Tirocini = default(EntityRef<Tirocini>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodAccordo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodAccordo
		{
			get
			{
				return this._CodAccordo;
			}
			set
			{
				if ((this._CodAccordo != value))
				{
					this.OnCodAccordoChanging(value);
					this.SendPropertyChanging();
					this._CodAccordo = value;
					this.SendPropertyChanged("CodAccordo");
					this.OnCodAccordoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataInizio", DbType="Date NOT NULL")]
		public System.DateTime DataInizio
		{
			get
			{
				return this._DataInizio;
			}
			set
			{
				if ((this._DataInizio != value))
				{
					this.OnDataInizioChanging(value);
					this.SendPropertyChanging();
					this._DataInizio = value;
					this.SendPropertyChanged("DataInizio");
					this.OnDataInizioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataFine", DbType="Date NOT NULL")]
		public System.DateTime DataFine
		{
			get
			{
				return this._DataFine;
			}
			set
			{
				if ((this._DataFine != value))
				{
					this.OnDataFineChanging(value);
					this.SendPropertyChanging();
					this._DataFine = value;
					this.SendPropertyChanged("DataFine");
					this.OnDataFineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodStudente", DbType="Int NOT NULL")]
		public int CodStudente
		{
			get
			{
				return this._CodStudente;
			}
			set
			{
				if ((this._CodStudente != value))
				{
					if (this._Studenti.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodStudenteChanging(value);
					this.SendPropertyChanging();
					this._CodStudente = value;
					this.SendPropertyChanged("CodStudente");
					this.OnCodStudenteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTirocinio", DbType="Int NOT NULL")]
		public int CodTirocinio
		{
			get
			{
				return this._CodTirocinio;
			}
			set
			{
				if ((this._CodTirocinio != value))
				{
					if (this._Tirocini.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodTirocinioChanging(value);
					this.SendPropertyChanging();
					this._CodTirocinio = value;
					this.SendPropertyChanged("CodTirocinio");
					this.OnCodTirocinioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studenti_Accordi", Storage="_Studenti", ThisKey="CodStudente", OtherKey="CodStudente", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Studenti Studenti
		{
			get
			{
				return this._Studenti.Entity;
			}
			set
			{
				Studenti previousValue = this._Studenti.Entity;
				if (((previousValue != value) 
							|| (this._Studenti.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Studenti.Entity = null;
						previousValue.Accordi.Remove(this);
					}
					this._Studenti.Entity = value;
					if ((value != null))
					{
						value.Accordi.Add(this);
						this._CodStudente = value.CodStudente;
					}
					else
					{
						this._CodStudente = default(int);
					}
					this.SendPropertyChanged("Studenti");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tirocini_Accordi", Storage="_Tirocini", ThisKey="CodTirocinio", OtherKey="CodTirocinio", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tirocini Tirocini
		{
			get
			{
				return this._Tirocini.Entity;
			}
			set
			{
				Tirocini previousValue = this._Tirocini.Entity;
				if (((previousValue != value) 
							|| (this._Tirocini.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tirocini.Entity = null;
						previousValue.Accordi.Remove(this);
					}
					this._Tirocini.Entity = value;
					if ((value != null))
					{
						value.Accordi.Add(this);
						this._CodTirocinio = value.CodTirocinio;
					}
					else
					{
						this._CodTirocinio = default(int);
					}
					this.SendPropertyChanged("Tirocini");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Alloggi")]
	public partial class Alloggi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodAlloggio;
		
		private string _Titolo;
		
		private string _Stato;
		
		private string _Citta;
		
		private string _CodPostale;
		
		private string _Quartiere;
		
		private string _Via;
		
		private System.Nullable<int> _NumCivico;
		
		private System.Nullable<short> _Piano;
		
		private System.Nullable<short> _Interno;
		
		private byte _NumPosti;
		
		private decimal _CostoAffitto;
		
		private bool _Arredato;
		
		private System.Nullable<decimal> _CostoServizi;
		
		private System.Nullable<decimal> _Commissione;
		
		private System.Nullable<decimal> _Caparra;
		
		private int _CodLocatore;
		
		private string _CodTipologia;
		
		private EntitySet<Prenotazioni> _Prenotazioni;
		
		private EntitySet<Richieste> _Richieste;
		
		private EntityRef<Locatori> _Locatori;
		
		private EntityRef<Tipologie> _Tipologie;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodAlloggioChanging(int value);
    partial void OnCodAlloggioChanged();
    partial void OnTitoloChanging(string value);
    partial void OnTitoloChanged();
    partial void OnStatoChanging(string value);
    partial void OnStatoChanged();
    partial void OnCittaChanging(string value);
    partial void OnCittaChanged();
    partial void OnCodPostaleChanging(string value);
    partial void OnCodPostaleChanged();
    partial void OnQuartiereChanging(string value);
    partial void OnQuartiereChanged();
    partial void OnViaChanging(string value);
    partial void OnViaChanged();
    partial void OnNumCivicoChanging(System.Nullable<int> value);
    partial void OnNumCivicoChanged();
    partial void OnPianoChanging(System.Nullable<short> value);
    partial void OnPianoChanged();
    partial void OnInternoChanging(System.Nullable<short> value);
    partial void OnInternoChanged();
    partial void OnNumPostiChanging(byte value);
    partial void OnNumPostiChanged();
    partial void OnCostoAffittoChanging(decimal value);
    partial void OnCostoAffittoChanged();
    partial void OnArredatoChanging(bool value);
    partial void OnArredatoChanged();
    partial void OnCostoServiziChanging(System.Nullable<decimal> value);
    partial void OnCostoServiziChanged();
    partial void OnCommissioneChanging(System.Nullable<decimal> value);
    partial void OnCommissioneChanged();
    partial void OnCaparraChanging(System.Nullable<decimal> value);
    partial void OnCaparraChanged();
    partial void OnCodLocatoreChanging(int value);
    partial void OnCodLocatoreChanged();
    partial void OnCodTipologiaChanging(string value);
    partial void OnCodTipologiaChanged();
    #endregion
		
		public Alloggi()
		{
			this._Prenotazioni = new EntitySet<Prenotazioni>(new Action<Prenotazioni>(this.attach_Prenotazioni), new Action<Prenotazioni>(this.detach_Prenotazioni));
			this._Richieste = new EntitySet<Richieste>(new Action<Richieste>(this.attach_Richieste), new Action<Richieste>(this.detach_Richieste));
			this._Locatori = default(EntityRef<Locatori>);
			this._Tipologie = default(EntityRef<Tipologie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodAlloggio", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodAlloggio
		{
			get
			{
				return this._CodAlloggio;
			}
			set
			{
				if ((this._CodAlloggio != value))
				{
					this.OnCodAlloggioChanging(value);
					this.SendPropertyChanging();
					this._CodAlloggio = value;
					this.SendPropertyChanged("CodAlloggio");
					this.OnCodAlloggioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titolo", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Titolo
		{
			get
			{
				return this._Titolo;
			}
			set
			{
				if ((this._Titolo != value))
				{
					this.OnTitoloChanging(value);
					this.SendPropertyChanging();
					this._Titolo = value;
					this.SendPropertyChanged("Titolo");
					this.OnTitoloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stato", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Stato
		{
			get
			{
				return this._Stato;
			}
			set
			{
				if ((this._Stato != value))
				{
					this.OnStatoChanging(value);
					this.SendPropertyChanging();
					this._Stato = value;
					this.SendPropertyChanged("Stato");
					this.OnStatoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Citta", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Citta
		{
			get
			{
				return this._Citta;
			}
			set
			{
				if ((this._Citta != value))
				{
					this.OnCittaChanging(value);
					this.SendPropertyChanging();
					this._Citta = value;
					this.SendPropertyChanged("Citta");
					this.OnCittaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodPostale", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string CodPostale
		{
			get
			{
				return this._CodPostale;
			}
			set
			{
				if ((this._CodPostale != value))
				{
					this.OnCodPostaleChanging(value);
					this.SendPropertyChanging();
					this._CodPostale = value;
					this.SendPropertyChanged("CodPostale");
					this.OnCodPostaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quartiere", DbType="VarChar(32)")]
		public string Quartiere
		{
			get
			{
				return this._Quartiere;
			}
			set
			{
				if ((this._Quartiere != value))
				{
					this.OnQuartiereChanging(value);
					this.SendPropertyChanging();
					this._Quartiere = value;
					this.SendPropertyChanged("Quartiere");
					this.OnQuartiereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Via", DbType="VarChar(64)")]
		public string Via
		{
			get
			{
				return this._Via;
			}
			set
			{
				if ((this._Via != value))
				{
					this.OnViaChanging(value);
					this.SendPropertyChanging();
					this._Via = value;
					this.SendPropertyChanged("Via");
					this.OnViaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumCivico", DbType="Int")]
		public System.Nullable<int> NumCivico
		{
			get
			{
				return this._NumCivico;
			}
			set
			{
				if ((this._NumCivico != value))
				{
					this.OnNumCivicoChanging(value);
					this.SendPropertyChanging();
					this._NumCivico = value;
					this.SendPropertyChanged("NumCivico");
					this.OnNumCivicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Piano", DbType="SmallInt")]
		public System.Nullable<short> Piano
		{
			get
			{
				return this._Piano;
			}
			set
			{
				if ((this._Piano != value))
				{
					this.OnPianoChanging(value);
					this.SendPropertyChanging();
					this._Piano = value;
					this.SendPropertyChanged("Piano");
					this.OnPianoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Interno", DbType="SmallInt")]
		public System.Nullable<short> Interno
		{
			get
			{
				return this._Interno;
			}
			set
			{
				if ((this._Interno != value))
				{
					this.OnInternoChanging(value);
					this.SendPropertyChanging();
					this._Interno = value;
					this.SendPropertyChanged("Interno");
					this.OnInternoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumPosti", DbType="TinyInt NOT NULL")]
		public byte NumPosti
		{
			get
			{
				return this._NumPosti;
			}
			set
			{
				if ((this._NumPosti != value))
				{
					this.OnNumPostiChanging(value);
					this.SendPropertyChanging();
					this._NumPosti = value;
					this.SendPropertyChanged("NumPosti");
					this.OnNumPostiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostoAffitto", DbType="Money NOT NULL")]
		public decimal CostoAffitto
		{
			get
			{
				return this._CostoAffitto;
			}
			set
			{
				if ((this._CostoAffitto != value))
				{
					this.OnCostoAffittoChanging(value);
					this.SendPropertyChanging();
					this._CostoAffitto = value;
					this.SendPropertyChanged("CostoAffitto");
					this.OnCostoAffittoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arredato", DbType="Bit NOT NULL")]
		public bool Arredato
		{
			get
			{
				return this._Arredato;
			}
			set
			{
				if ((this._Arredato != value))
				{
					this.OnArredatoChanging(value);
					this.SendPropertyChanging();
					this._Arredato = value;
					this.SendPropertyChanged("Arredato");
					this.OnArredatoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostoServizi", DbType="SmallMoney")]
		public System.Nullable<decimal> CostoServizi
		{
			get
			{
				return this._CostoServizi;
			}
			set
			{
				if ((this._CostoServizi != value))
				{
					this.OnCostoServiziChanging(value);
					this.SendPropertyChanging();
					this._CostoServizi = value;
					this.SendPropertyChanged("CostoServizi");
					this.OnCostoServiziChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commissione", DbType="SmallMoney")]
		public System.Nullable<decimal> Commissione
		{
			get
			{
				return this._Commissione;
			}
			set
			{
				if ((this._Commissione != value))
				{
					this.OnCommissioneChanging(value);
					this.SendPropertyChanging();
					this._Commissione = value;
					this.SendPropertyChanged("Commissione");
					this.OnCommissioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caparra", DbType="SmallMoney")]
		public System.Nullable<decimal> Caparra
		{
			get
			{
				return this._Caparra;
			}
			set
			{
				if ((this._Caparra != value))
				{
					this.OnCaparraChanging(value);
					this.SendPropertyChanging();
					this._Caparra = value;
					this.SendPropertyChanged("Caparra");
					this.OnCaparraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodLocatore", DbType="Int NOT NULL")]
		public int CodLocatore
		{
			get
			{
				return this._CodLocatore;
			}
			set
			{
				if ((this._CodLocatore != value))
				{
					if (this._Locatori.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodLocatoreChanging(value);
					this.SendPropertyChanging();
					this._CodLocatore = value;
					this.SendPropertyChanged("CodLocatore");
					this.OnCodLocatoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipologia", DbType="VarChar(4) NOT NULL", CanBeNull=false)]
		public string CodTipologia
		{
			get
			{
				return this._CodTipologia;
			}
			set
			{
				if ((this._CodTipologia != value))
				{
					if (this._Tipologie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodTipologiaChanging(value);
					this.SendPropertyChanging();
					this._CodTipologia = value;
					this.SendPropertyChanged("CodTipologia");
					this.OnCodTipologiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alloggi_Prenotazioni", Storage="_Prenotazioni", ThisKey="CodAlloggio", OtherKey="CodAlloggio")]
		public EntitySet<Prenotazioni> Prenotazioni
		{
			get
			{
				return this._Prenotazioni;
			}
			set
			{
				this._Prenotazioni.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alloggi_Richieste", Storage="_Richieste", ThisKey="CodAlloggio", OtherKey="CodAlloggio")]
		public EntitySet<Richieste> Richieste
		{
			get
			{
				return this._Richieste;
			}
			set
			{
				this._Richieste.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Locatori_Alloggi", Storage="_Locatori", ThisKey="CodLocatore", OtherKey="CodLocatore", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Locatori Locatori
		{
			get
			{
				return this._Locatori.Entity;
			}
			set
			{
				Locatori previousValue = this._Locatori.Entity;
				if (((previousValue != value) 
							|| (this._Locatori.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Locatori.Entity = null;
						previousValue.Alloggi.Remove(this);
					}
					this._Locatori.Entity = value;
					if ((value != null))
					{
						value.Alloggi.Add(this);
						this._CodLocatore = value.CodLocatore;
					}
					else
					{
						this._CodLocatore = default(int);
					}
					this.SendPropertyChanged("Locatori");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tipologie_Alloggi", Storage="_Tipologie", ThisKey="CodTipologia", OtherKey="CodTipologia", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tipologie Tipologie
		{
			get
			{
				return this._Tipologie.Entity;
			}
			set
			{
				Tipologie previousValue = this._Tipologie.Entity;
				if (((previousValue != value) 
							|| (this._Tipologie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tipologie.Entity = null;
						previousValue.Alloggi.Remove(this);
					}
					this._Tipologie.Entity = value;
					if ((value != null))
					{
						value.Alloggi.Add(this);
						this._CodTipologia = value.CodTipologia;
					}
					else
					{
						this._CodTipologia = default(string);
					}
					this.SendPropertyChanged("Tipologie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prenotazioni(Prenotazioni entity)
		{
			this.SendPropertyChanging();
			entity.Alloggi = this;
		}
		
		private void detach_Prenotazioni(Prenotazioni entity)
		{
			this.SendPropertyChanging();
			entity.Alloggi = null;
		}
		
		private void attach_Richieste(Richieste entity)
		{
			this.SendPropertyChanging();
			entity.Alloggi = this;
		}
		
		private void detach_Richieste(Richieste entity)
		{
			this.SendPropertyChanging();
			entity.Alloggi = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ambiti")]
	public partial class Ambiti : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private double _CodAmbito;
		
		private string _Descrizione;
		
		private byte _CodCampo;
		
		private EntitySet<Coperture> _Coperture;
		
		private EntityRef<Campi> _Campi;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodAmbitoChanging(double value);
    partial void OnCodAmbitoChanged();
    partial void OnDescrizioneChanging(string value);
    partial void OnDescrizioneChanged();
    partial void OnCodCampoChanging(byte value);
    partial void OnCodCampoChanged();
    #endregion
		
		public Ambiti()
		{
			this._Coperture = new EntitySet<Coperture>(new Action<Coperture>(this.attach_Coperture), new Action<Coperture>(this.detach_Coperture));
			this._Campi = default(EntityRef<Campi>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodAmbito", DbType="Float NOT NULL", IsPrimaryKey=true)]
		public double CodAmbito
		{
			get
			{
				return this._CodAmbito;
			}
			set
			{
				if ((this._CodAmbito != value))
				{
					this.OnCodAmbitoChanging(value);
					this.SendPropertyChanging();
					this._CodAmbito = value;
					this.SendPropertyChanged("CodAmbito");
					this.OnCodAmbitoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descrizione", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Descrizione
		{
			get
			{
				return this._Descrizione;
			}
			set
			{
				if ((this._Descrizione != value))
				{
					this.OnDescrizioneChanging(value);
					this.SendPropertyChanging();
					this._Descrizione = value;
					this.SendPropertyChanged("Descrizione");
					this.OnDescrizioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodCampo", DbType="TinyInt NOT NULL")]
		public byte CodCampo
		{
			get
			{
				return this._CodCampo;
			}
			set
			{
				if ((this._CodCampo != value))
				{
					if (this._Campi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodCampoChanging(value);
					this.SendPropertyChanging();
					this._CodCampo = value;
					this.SendPropertyChanged("CodCampo");
					this.OnCodCampoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ambiti_Coperture", Storage="_Coperture", ThisKey="CodAmbito", OtherKey="CodAmbito")]
		public EntitySet<Coperture> Coperture
		{
			get
			{
				return this._Coperture;
			}
			set
			{
				this._Coperture.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Campi_Ambiti", Storage="_Campi", ThisKey="CodCampo", OtherKey="CodCampo", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Campi Campi
		{
			get
			{
				return this._Campi.Entity;
			}
			set
			{
				Campi previousValue = this._Campi.Entity;
				if (((previousValue != value) 
							|| (this._Campi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Campi.Entity = null;
						previousValue.Ambiti.Remove(this);
					}
					this._Campi.Entity = value;
					if ((value != null))
					{
						value.Ambiti.Add(this);
						this._CodCampo = value.CodCampo;
					}
					else
					{
						this._CodCampo = default(byte);
					}
					this.SendPropertyChanged("Campi");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Coperture(Coperture entity)
		{
			this.SendPropertyChanging();
			entity.Ambiti = this;
		}
		
		private void detach_Coperture(Coperture entity)
		{
			this.SendPropertyChanging();
			entity.Ambiti = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Aziende")]
	public partial class Aziende : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodVAT;
		
		private string _Nome;
		
		private string _Stato;
		
		private string _Citta;
		
		private string _CodPostale;
		
		private string _Via;
		
		private int _NumCivico;
		
		private string _SitoWeb;
		
		private string _Mail;
		
		private string _Telefono;
		
		private int _CodIntermediario;
		
		private string _CodNACE;
		
		private EntitySet<Tirocini> _Tirocini;
		
		private EntityRef<Intermediari> _Intermediari;
		
		private EntityRef<Settori> _Settori;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodVATChanging(int value);
    partial void OnCodVATChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnStatoChanging(string value);
    partial void OnStatoChanged();
    partial void OnCittaChanging(string value);
    partial void OnCittaChanged();
    partial void OnCodPostaleChanging(string value);
    partial void OnCodPostaleChanged();
    partial void OnViaChanging(string value);
    partial void OnViaChanged();
    partial void OnNumCivicoChanging(int value);
    partial void OnNumCivicoChanged();
    partial void OnSitoWebChanging(string value);
    partial void OnSitoWebChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnCodIntermediarioChanging(int value);
    partial void OnCodIntermediarioChanged();
    partial void OnCodNACEChanging(string value);
    partial void OnCodNACEChanged();
    #endregion
		
		public Aziende()
		{
			this._Tirocini = new EntitySet<Tirocini>(new Action<Tirocini>(this.attach_Tirocini), new Action<Tirocini>(this.detach_Tirocini));
			this._Intermediari = default(EntityRef<Intermediari>);
			this._Settori = default(EntityRef<Settori>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodVAT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodVAT
		{
			get
			{
				return this._CodVAT;
			}
			set
			{
				if ((this._CodVAT != value))
				{
					this.OnCodVATChanging(value);
					this.SendPropertyChanging();
					this._CodVAT = value;
					this.SendPropertyChanged("CodVAT");
					this.OnCodVATChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stato", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Stato
		{
			get
			{
				return this._Stato;
			}
			set
			{
				if ((this._Stato != value))
				{
					this.OnStatoChanging(value);
					this.SendPropertyChanging();
					this._Stato = value;
					this.SendPropertyChanged("Stato");
					this.OnStatoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Citta", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Citta
		{
			get
			{
				return this._Citta;
			}
			set
			{
				if ((this._Citta != value))
				{
					this.OnCittaChanging(value);
					this.SendPropertyChanging();
					this._Citta = value;
					this.SendPropertyChanged("Citta");
					this.OnCittaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodPostale", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string CodPostale
		{
			get
			{
				return this._CodPostale;
			}
			set
			{
				if ((this._CodPostale != value))
				{
					this.OnCodPostaleChanging(value);
					this.SendPropertyChanging();
					this._CodPostale = value;
					this.SendPropertyChanged("CodPostale");
					this.OnCodPostaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Via", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Via
		{
			get
			{
				return this._Via;
			}
			set
			{
				if ((this._Via != value))
				{
					this.OnViaChanging(value);
					this.SendPropertyChanging();
					this._Via = value;
					this.SendPropertyChanged("Via");
					this.OnViaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumCivico", DbType="Int NOT NULL")]
		public int NumCivico
		{
			get
			{
				return this._NumCivico;
			}
			set
			{
				if ((this._NumCivico != value))
				{
					this.OnNumCivicoChanging(value);
					this.SendPropertyChanging();
					this._NumCivico = value;
					this.SendPropertyChanged("NumCivico");
					this.OnNumCivicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SitoWeb", DbType="VarChar(64)")]
		public string SitoWeb
		{
			get
			{
				return this._SitoWeb;
			}
			set
			{
				if ((this._SitoWeb != value))
				{
					this.OnSitoWebChanging(value);
					this.SendPropertyChanging();
					this._SitoWeb = value;
					this.SendPropertyChanged("SitoWeb");
					this.OnSitoWebChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="VarChar(64)")]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="VarChar(32)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodIntermediario", DbType="Int NOT NULL")]
		public int CodIntermediario
		{
			get
			{
				return this._CodIntermediario;
			}
			set
			{
				if ((this._CodIntermediario != value))
				{
					if (this._Intermediari.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodIntermediarioChanging(value);
					this.SendPropertyChanging();
					this._CodIntermediario = value;
					this.SendPropertyChanged("CodIntermediario");
					this.OnCodIntermediarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodNACE", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string CodNACE
		{
			get
			{
				return this._CodNACE;
			}
			set
			{
				if ((this._CodNACE != value))
				{
					if (this._Settori.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodNACEChanging(value);
					this.SendPropertyChanging();
					this._CodNACE = value;
					this.SendPropertyChanged("CodNACE");
					this.OnCodNACEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Aziende_Tirocini", Storage="_Tirocini", ThisKey="CodVAT", OtherKey="CodVAT")]
		public EntitySet<Tirocini> Tirocini
		{
			get
			{
				return this._Tirocini;
			}
			set
			{
				this._Tirocini.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Intermediari_Aziende", Storage="_Intermediari", ThisKey="CodIntermediario", OtherKey="CodIntermediario", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Intermediari Intermediari
		{
			get
			{
				return this._Intermediari.Entity;
			}
			set
			{
				Intermediari previousValue = this._Intermediari.Entity;
				if (((previousValue != value) 
							|| (this._Intermediari.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Intermediari.Entity = null;
						previousValue.Aziende.Remove(this);
					}
					this._Intermediari.Entity = value;
					if ((value != null))
					{
						value.Aziende.Add(this);
						this._CodIntermediario = value.CodIntermediario;
					}
					else
					{
						this._CodIntermediario = default(int);
					}
					this.SendPropertyChanged("Intermediari");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Settori_Aziende", Storage="_Settori", ThisKey="CodNACE", OtherKey="CodNACE", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Settori Settori
		{
			get
			{
				return this._Settori.Entity;
			}
			set
			{
				Settori previousValue = this._Settori.Entity;
				if (((previousValue != value) 
							|| (this._Settori.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Settori.Entity = null;
						previousValue.Aziende.Remove(this);
					}
					this._Settori.Entity = value;
					if ((value != null))
					{
						value.Aziende.Add(this);
						this._CodNACE = value.CodNACE;
					}
					else
					{
						this._CodNACE = default(string);
					}
					this.SendPropertyChanged("Settori");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tirocini(Tirocini entity)
		{
			this.SendPropertyChanging();
			entity.Aziende = this;
		}
		
		private void detach_Tirocini(Tirocini entity)
		{
			this.SendPropertyChanging();
			entity.Aziende = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Campi")]
	public partial class Campi : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _CodCampo;
		
		private string _Descrizione;
		
		private EntitySet<Ambiti> _Ambiti;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodCampoChanging(byte value);
    partial void OnCodCampoChanged();
    partial void OnDescrizioneChanging(string value);
    partial void OnDescrizioneChanged();
    #endregion
		
		public Campi()
		{
			this._Ambiti = new EntitySet<Ambiti>(new Action<Ambiti>(this.attach_Ambiti), new Action<Ambiti>(this.detach_Ambiti));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodCampo", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte CodCampo
		{
			get
			{
				return this._CodCampo;
			}
			set
			{
				if ((this._CodCampo != value))
				{
					this.OnCodCampoChanging(value);
					this.SendPropertyChanging();
					this._CodCampo = value;
					this.SendPropertyChanged("CodCampo");
					this.OnCodCampoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descrizione", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Descrizione
		{
			get
			{
				return this._Descrizione;
			}
			set
			{
				if ((this._Descrizione != value))
				{
					this.OnDescrizioneChanging(value);
					this.SendPropertyChanging();
					this._Descrizione = value;
					this.SendPropertyChanged("Descrizione");
					this.OnDescrizioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Campi_Ambiti", Storage="_Ambiti", ThisKey="CodCampo", OtherKey="CodCampo")]
		public EntitySet<Ambiti> Ambiti
		{
			get
			{
				return this._Ambiti;
			}
			set
			{
				this._Ambiti.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ambiti(Ambiti entity)
		{
			this.SendPropertyChanging();
			entity.Campi = this;
		}
		
		private void detach_Ambiti(Ambiti entity)
		{
			this.SendPropertyChanging();
			entity.Campi = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Candidature")]
	public partial class Candidature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodStudente;
		
		private int _CodTirocinio;
		
		private bool _Accettata;
		
		private EntityRef<Studenti> _Studenti;
		
		private EntityRef<Tirocini> _Tirocini;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodStudenteChanging(int value);
    partial void OnCodStudenteChanged();
    partial void OnCodTirocinioChanging(int value);
    partial void OnCodTirocinioChanged();
    partial void OnAccettataChanging(bool value);
    partial void OnAccettataChanged();
    #endregion
		
		public Candidature()
		{
			this._Studenti = default(EntityRef<Studenti>);
			this._Tirocini = default(EntityRef<Tirocini>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodStudente", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodStudente
		{
			get
			{
				return this._CodStudente;
			}
			set
			{
				if ((this._CodStudente != value))
				{
					if (this._Studenti.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodStudenteChanging(value);
					this.SendPropertyChanging();
					this._CodStudente = value;
					this.SendPropertyChanged("CodStudente");
					this.OnCodStudenteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTirocinio", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodTirocinio
		{
			get
			{
				return this._CodTirocinio;
			}
			set
			{
				if ((this._CodTirocinio != value))
				{
					if (this._Tirocini.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodTirocinioChanging(value);
					this.SendPropertyChanging();
					this._CodTirocinio = value;
					this.SendPropertyChanged("CodTirocinio");
					this.OnCodTirocinioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accettata", DbType="Bit NOT NULL")]
		public bool Accettata
		{
			get
			{
				return this._Accettata;
			}
			set
			{
				if ((this._Accettata != value))
				{
					this.OnAccettataChanging(value);
					this.SendPropertyChanging();
					this._Accettata = value;
					this.SendPropertyChanged("Accettata");
					this.OnAccettataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studenti_Candidature", Storage="_Studenti", ThisKey="CodStudente", OtherKey="CodStudente", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Studenti Studenti
		{
			get
			{
				return this._Studenti.Entity;
			}
			set
			{
				Studenti previousValue = this._Studenti.Entity;
				if (((previousValue != value) 
							|| (this._Studenti.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Studenti.Entity = null;
						previousValue.Candidature.Remove(this);
					}
					this._Studenti.Entity = value;
					if ((value != null))
					{
						value.Candidature.Add(this);
						this._CodStudente = value.CodStudente;
					}
					else
					{
						this._CodStudente = default(int);
					}
					this.SendPropertyChanged("Studenti");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tirocini_Candidature", Storage="_Tirocini", ThisKey="CodTirocinio", OtherKey="CodTirocinio", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tirocini Tirocini
		{
			get
			{
				return this._Tirocini.Entity;
			}
			set
			{
				Tirocini previousValue = this._Tirocini.Entity;
				if (((previousValue != value) 
							|| (this._Tirocini.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tirocini.Entity = null;
						previousValue.Candidature.Remove(this);
					}
					this._Tirocini.Entity = value;
					if ((value != null))
					{
						value.Candidature.Add(this);
						this._CodTirocinio = value.CodTirocinio;
					}
					else
					{
						this._CodTirocinio = default(int);
					}
					this.SendPropertyChanged("Tirocini");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Coperture")]
	public partial class Coperture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private double _CodAmbito;
		
		private int _CodTirocinio;
		
		private EntityRef<Ambiti> _Ambiti;
		
		private EntityRef<Tirocini> _Tirocini;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodAmbitoChanging(double value);
    partial void OnCodAmbitoChanged();
    partial void OnCodTirocinioChanging(int value);
    partial void OnCodTirocinioChanged();
    #endregion
		
		public Coperture()
		{
			this._Ambiti = default(EntityRef<Ambiti>);
			this._Tirocini = default(EntityRef<Tirocini>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodAmbito", DbType="Float NOT NULL", IsPrimaryKey=true)]
		public double CodAmbito
		{
			get
			{
				return this._CodAmbito;
			}
			set
			{
				if ((this._CodAmbito != value))
				{
					if (this._Ambiti.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodAmbitoChanging(value);
					this.SendPropertyChanging();
					this._CodAmbito = value;
					this.SendPropertyChanged("CodAmbito");
					this.OnCodAmbitoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTirocinio", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodTirocinio
		{
			get
			{
				return this._CodTirocinio;
			}
			set
			{
				if ((this._CodTirocinio != value))
				{
					if (this._Tirocini.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodTirocinioChanging(value);
					this.SendPropertyChanging();
					this._CodTirocinio = value;
					this.SendPropertyChanged("CodTirocinio");
					this.OnCodTirocinioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ambiti_Coperture", Storage="_Ambiti", ThisKey="CodAmbito", OtherKey="CodAmbito", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Ambiti Ambiti
		{
			get
			{
				return this._Ambiti.Entity;
			}
			set
			{
				Ambiti previousValue = this._Ambiti.Entity;
				if (((previousValue != value) 
							|| (this._Ambiti.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ambiti.Entity = null;
						previousValue.Coperture.Remove(this);
					}
					this._Ambiti.Entity = value;
					if ((value != null))
					{
						value.Coperture.Add(this);
						this._CodAmbito = value.CodAmbito;
					}
					else
					{
						this._CodAmbito = default(double);
					}
					this.SendPropertyChanged("Ambiti");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tirocini_Coperture", Storage="_Tirocini", ThisKey="CodTirocinio", OtherKey="CodTirocinio", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Tirocini Tirocini
		{
			get
			{
				return this._Tirocini.Entity;
			}
			set
			{
				Tirocini previousValue = this._Tirocini.Entity;
				if (((previousValue != value) 
							|| (this._Tirocini.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tirocini.Entity = null;
						previousValue.Coperture.Remove(this);
					}
					this._Tirocini.Entity = value;
					if ((value != null))
					{
						value.Coperture.Add(this);
						this._CodTirocinio = value.CodTirocinio;
					}
					else
					{
						this._CodTirocinio = default(int);
					}
					this.SendPropertyChanged("Tirocini");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Intermediari")]
	public partial class Intermediari : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodIntermediario;
		
		private string _CF;
		
		private EntitySet<Aziende> _Aziende;
		
		private EntityRef<Persone> _Persone;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodIntermediarioChanging(int value);
    partial void OnCodIntermediarioChanged();
    partial void OnCFChanging(string value);
    partial void OnCFChanged();
    #endregion
		
		public Intermediari()
		{
			this._Aziende = new EntitySet<Aziende>(new Action<Aziende>(this.attach_Aziende), new Action<Aziende>(this.detach_Aziende));
			this._Persone = default(EntityRef<Persone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodIntermediario", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodIntermediario
		{
			get
			{
				return this._CodIntermediario;
			}
			set
			{
				if ((this._CodIntermediario != value))
				{
					this.OnCodIntermediarioChanging(value);
					this.SendPropertyChanging();
					this._CodIntermediario = value;
					this.SendPropertyChanged("CodIntermediario");
					this.OnCodIntermediarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CF", DbType="Char(16) NOT NULL", CanBeNull=false)]
		public string CF
		{
			get
			{
				return this._CF;
			}
			set
			{
				if ((this._CF != value))
				{
					if (this._Persone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCFChanging(value);
					this.SendPropertyChanging();
					this._CF = value;
					this.SendPropertyChanged("CF");
					this.OnCFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Intermediari_Aziende", Storage="_Aziende", ThisKey="CodIntermediario", OtherKey="CodIntermediario")]
		public EntitySet<Aziende> Aziende
		{
			get
			{
				return this._Aziende;
			}
			set
			{
				this._Aziende.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persone_Intermediari", Storage="_Persone", ThisKey="CF", OtherKey="CF", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Persone Persone
		{
			get
			{
				return this._Persone.Entity;
			}
			set
			{
				Persone previousValue = this._Persone.Entity;
				if (((previousValue != value) 
							|| (this._Persone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persone.Entity = null;
						previousValue.Intermediari.Remove(this);
					}
					this._Persone.Entity = value;
					if ((value != null))
					{
						value.Intermediari.Add(this);
						this._CF = value.CF;
					}
					else
					{
						this._CF = default(string);
					}
					this.SendPropertyChanged("Persone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Aziende(Aziende entity)
		{
			this.SendPropertyChanging();
			entity.Intermediari = this;
		}
		
		private void detach_Aziende(Aziende entity)
		{
			this.SendPropertyChanging();
			entity.Intermediari = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locatori")]
	public partial class Locatori : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodLocatore;
		
		private string _CF;
		
		private EntitySet<Alloggi> _Alloggi;
		
		private EntityRef<Persone> _Persone;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodLocatoreChanging(int value);
    partial void OnCodLocatoreChanged();
    partial void OnCFChanging(string value);
    partial void OnCFChanged();
    #endregion
		
		public Locatori()
		{
			this._Alloggi = new EntitySet<Alloggi>(new Action<Alloggi>(this.attach_Alloggi), new Action<Alloggi>(this.detach_Alloggi));
			this._Persone = default(EntityRef<Persone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodLocatore", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodLocatore
		{
			get
			{
				return this._CodLocatore;
			}
			set
			{
				if ((this._CodLocatore != value))
				{
					this.OnCodLocatoreChanging(value);
					this.SendPropertyChanging();
					this._CodLocatore = value;
					this.SendPropertyChanged("CodLocatore");
					this.OnCodLocatoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CF", DbType="Char(16) NOT NULL", CanBeNull=false)]
		public string CF
		{
			get
			{
				return this._CF;
			}
			set
			{
				if ((this._CF != value))
				{
					if (this._Persone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCFChanging(value);
					this.SendPropertyChanging();
					this._CF = value;
					this.SendPropertyChanged("CF");
					this.OnCFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Locatori_Alloggi", Storage="_Alloggi", ThisKey="CodLocatore", OtherKey="CodLocatore")]
		public EntitySet<Alloggi> Alloggi
		{
			get
			{
				return this._Alloggi;
			}
			set
			{
				this._Alloggi.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persone_Locatori", Storage="_Persone", ThisKey="CF", OtherKey="CF", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Persone Persone
		{
			get
			{
				return this._Persone.Entity;
			}
			set
			{
				Persone previousValue = this._Persone.Entity;
				if (((previousValue != value) 
							|| (this._Persone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persone.Entity = null;
						previousValue.Locatori.Remove(this);
					}
					this._Persone.Entity = value;
					if ((value != null))
					{
						value.Locatori.Add(this);
						this._CF = value.CF;
					}
					else
					{
						this._CF = default(string);
					}
					this.SendPropertyChanged("Persone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alloggi(Alloggi entity)
		{
			this.SendPropertyChanging();
			entity.Locatori = this;
		}
		
		private void detach_Alloggi(Alloggi entity)
		{
			this.SendPropertyChanging();
			entity.Locatori = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persone")]
	public partial class Persone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CF;
		
		private string _Nome;
		
		private string _Cognome;
		
		private string _Mail;
		
		private string _Telefono;
		
		private System.DateTime _DataNascita;
		
		private string _Stato;
		
		private string _Citta;
		
		private string _CodPostale;
		
		private string _Via;
		
		private int _NumCivico;
		
		private EntitySet<Intermediari> _Intermediari;
		
		private EntitySet<Locatori> _Locatori;
		
		private EntitySet<Studenti> _Studenti;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCFChanging(string value);
    partial void OnCFChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnCognomeChanging(string value);
    partial void OnCognomeChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnDataNascitaChanging(System.DateTime value);
    partial void OnDataNascitaChanged();
    partial void OnStatoChanging(string value);
    partial void OnStatoChanged();
    partial void OnCittaChanging(string value);
    partial void OnCittaChanged();
    partial void OnCodPostaleChanging(string value);
    partial void OnCodPostaleChanged();
    partial void OnViaChanging(string value);
    partial void OnViaChanged();
    partial void OnNumCivicoChanging(int value);
    partial void OnNumCivicoChanged();
    #endregion
		
		public Persone()
		{
			this._Intermediari = new EntitySet<Intermediari>(new Action<Intermediari>(this.attach_Intermediari), new Action<Intermediari>(this.detach_Intermediari));
			this._Locatori = new EntitySet<Locatori>(new Action<Locatori>(this.attach_Locatori), new Action<Locatori>(this.detach_Locatori));
			this._Studenti = new EntitySet<Studenti>(new Action<Studenti>(this.attach_Studenti), new Action<Studenti>(this.detach_Studenti));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CF", DbType="Char(16) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CF
		{
			get
			{
				return this._CF;
			}
			set
			{
				if ((this._CF != value))
				{
					this.OnCFChanging(value);
					this.SendPropertyChanging();
					this._CF = value;
					this.SendPropertyChanged("CF");
					this.OnCFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cognome", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Cognome
		{
			get
			{
				return this._Cognome;
			}
			set
			{
				if ((this._Cognome != value))
				{
					this.OnCognomeChanging(value);
					this.SendPropertyChanging();
					this._Cognome = value;
					this.SendPropertyChanged("Cognome");
					this.OnCognomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telefono", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataNascita", DbType="Date NOT NULL")]
		public System.DateTime DataNascita
		{
			get
			{
				return this._DataNascita;
			}
			set
			{
				if ((this._DataNascita != value))
				{
					this.OnDataNascitaChanging(value);
					this.SendPropertyChanging();
					this._DataNascita = value;
					this.SendPropertyChanged("DataNascita");
					this.OnDataNascitaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stato", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Stato
		{
			get
			{
				return this._Stato;
			}
			set
			{
				if ((this._Stato != value))
				{
					this.OnStatoChanging(value);
					this.SendPropertyChanging();
					this._Stato = value;
					this.SendPropertyChanged("Stato");
					this.OnStatoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Citta", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Citta
		{
			get
			{
				return this._Citta;
			}
			set
			{
				if ((this._Citta != value))
				{
					this.OnCittaChanging(value);
					this.SendPropertyChanging();
					this._Citta = value;
					this.SendPropertyChanged("Citta");
					this.OnCittaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodPostale", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string CodPostale
		{
			get
			{
				return this._CodPostale;
			}
			set
			{
				if ((this._CodPostale != value))
				{
					this.OnCodPostaleChanging(value);
					this.SendPropertyChanging();
					this._CodPostale = value;
					this.SendPropertyChanged("CodPostale");
					this.OnCodPostaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Via", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Via
		{
			get
			{
				return this._Via;
			}
			set
			{
				if ((this._Via != value))
				{
					this.OnViaChanging(value);
					this.SendPropertyChanging();
					this._Via = value;
					this.SendPropertyChanged("Via");
					this.OnViaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumCivico", DbType="Int NOT NULL")]
		public int NumCivico
		{
			get
			{
				return this._NumCivico;
			}
			set
			{
				if ((this._NumCivico != value))
				{
					this.OnNumCivicoChanging(value);
					this.SendPropertyChanging();
					this._NumCivico = value;
					this.SendPropertyChanged("NumCivico");
					this.OnNumCivicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persone_Intermediari", Storage="_Intermediari", ThisKey="CF", OtherKey="CF")]
		public EntitySet<Intermediari> Intermediari
		{
			get
			{
				return this._Intermediari;
			}
			set
			{
				this._Intermediari.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persone_Locatori", Storage="_Locatori", ThisKey="CF", OtherKey="CF")]
		public EntitySet<Locatori> Locatori
		{
			get
			{
				return this._Locatori;
			}
			set
			{
				this._Locatori.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persone_Studenti", Storage="_Studenti", ThisKey="CF", OtherKey="CF")]
		public EntitySet<Studenti> Studenti
		{
			get
			{
				return this._Studenti;
			}
			set
			{
				this._Studenti.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Intermediari(Intermediari entity)
		{
			this.SendPropertyChanging();
			entity.Persone = this;
		}
		
		private void detach_Intermediari(Intermediari entity)
		{
			this.SendPropertyChanging();
			entity.Persone = null;
		}
		
		private void attach_Locatori(Locatori entity)
		{
			this.SendPropertyChanging();
			entity.Persone = this;
		}
		
		private void detach_Locatori(Locatori entity)
		{
			this.SendPropertyChanging();
			entity.Persone = null;
		}
		
		private void attach_Studenti(Studenti entity)
		{
			this.SendPropertyChanging();
			entity.Persone = this;
		}
		
		private void detach_Studenti(Studenti entity)
		{
			this.SendPropertyChanging();
			entity.Persone = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prenotazioni")]
	public partial class Prenotazioni : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodPrenotazione;
		
		private System.DateTime _DataInizio;
		
		private System.DateTime _DataFine;
		
		private System.DateTime _DataPrenotazione;
		
		private int _CodStudente;
		
		private int _CodAlloggio;
		
		private EntityRef<Alloggi> _Alloggi;
		
		private EntityRef<Studenti> _Studenti;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodPrenotazioneChanging(int value);
    partial void OnCodPrenotazioneChanged();
    partial void OnDataInizioChanging(System.DateTime value);
    partial void OnDataInizioChanged();
    partial void OnDataFineChanging(System.DateTime value);
    partial void OnDataFineChanged();
    partial void OnDataPrenotazioneChanging(System.DateTime value);
    partial void OnDataPrenotazioneChanged();
    partial void OnCodStudenteChanging(int value);
    partial void OnCodStudenteChanged();
    partial void OnCodAlloggioChanging(int value);
    partial void OnCodAlloggioChanged();
    #endregion
		
		public Prenotazioni()
		{
			this._Alloggi = default(EntityRef<Alloggi>);
			this._Studenti = default(EntityRef<Studenti>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodPrenotazione", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodPrenotazione
		{
			get
			{
				return this._CodPrenotazione;
			}
			set
			{
				if ((this._CodPrenotazione != value))
				{
					this.OnCodPrenotazioneChanging(value);
					this.SendPropertyChanging();
					this._CodPrenotazione = value;
					this.SendPropertyChanged("CodPrenotazione");
					this.OnCodPrenotazioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataInizio", DbType="Date NOT NULL")]
		public System.DateTime DataInizio
		{
			get
			{
				return this._DataInizio;
			}
			set
			{
				if ((this._DataInizio != value))
				{
					this.OnDataInizioChanging(value);
					this.SendPropertyChanging();
					this._DataInizio = value;
					this.SendPropertyChanged("DataInizio");
					this.OnDataInizioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataFine", DbType="Date NOT NULL")]
		public System.DateTime DataFine
		{
			get
			{
				return this._DataFine;
			}
			set
			{
				if ((this._DataFine != value))
				{
					this.OnDataFineChanging(value);
					this.SendPropertyChanging();
					this._DataFine = value;
					this.SendPropertyChanged("DataFine");
					this.OnDataFineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataPrenotazione", DbType="Date NOT NULL")]
		public System.DateTime DataPrenotazione
		{
			get
			{
				return this._DataPrenotazione;
			}
			set
			{
				if ((this._DataPrenotazione != value))
				{
					this.OnDataPrenotazioneChanging(value);
					this.SendPropertyChanging();
					this._DataPrenotazione = value;
					this.SendPropertyChanged("DataPrenotazione");
					this.OnDataPrenotazioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodStudente", DbType="Int NOT NULL")]
		public int CodStudente
		{
			get
			{
				return this._CodStudente;
			}
			set
			{
				if ((this._CodStudente != value))
				{
					if (this._Studenti.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodStudenteChanging(value);
					this.SendPropertyChanging();
					this._CodStudente = value;
					this.SendPropertyChanged("CodStudente");
					this.OnCodStudenteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodAlloggio", DbType="Int NOT NULL")]
		public int CodAlloggio
		{
			get
			{
				return this._CodAlloggio;
			}
			set
			{
				if ((this._CodAlloggio != value))
				{
					if (this._Alloggi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodAlloggioChanging(value);
					this.SendPropertyChanging();
					this._CodAlloggio = value;
					this.SendPropertyChanged("CodAlloggio");
					this.OnCodAlloggioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alloggi_Prenotazioni", Storage="_Alloggi", ThisKey="CodAlloggio", OtherKey="CodAlloggio", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Alloggi Alloggi
		{
			get
			{
				return this._Alloggi.Entity;
			}
			set
			{
				Alloggi previousValue = this._Alloggi.Entity;
				if (((previousValue != value) 
							|| (this._Alloggi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alloggi.Entity = null;
						previousValue.Prenotazioni.Remove(this);
					}
					this._Alloggi.Entity = value;
					if ((value != null))
					{
						value.Prenotazioni.Add(this);
						this._CodAlloggio = value.CodAlloggio;
					}
					else
					{
						this._CodAlloggio = default(int);
					}
					this.SendPropertyChanged("Alloggi");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studenti_Prenotazioni", Storage="_Studenti", ThisKey="CodStudente", OtherKey="CodStudente", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Studenti Studenti
		{
			get
			{
				return this._Studenti.Entity;
			}
			set
			{
				Studenti previousValue = this._Studenti.Entity;
				if (((previousValue != value) 
							|| (this._Studenti.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Studenti.Entity = null;
						previousValue.Prenotazioni.Remove(this);
					}
					this._Studenti.Entity = value;
					if ((value != null))
					{
						value.Prenotazioni.Add(this);
						this._CodStudente = value.CodStudente;
					}
					else
					{
						this._CodStudente = default(int);
					}
					this.SendPropertyChanged("Studenti");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Richieste")]
	public partial class Richieste : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodAlloggio;
		
		private int _CodStudente;
		
		private System.DateTime _DataInizio;
		
		private System.DateTime _DataFine;
		
		private bool _Accettata;
		
		private EntityRef<Alloggi> _Alloggi;
		
		private EntityRef<Studenti> _Studenti;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodAlloggioChanging(int value);
    partial void OnCodAlloggioChanged();
    partial void OnCodStudenteChanging(int value);
    partial void OnCodStudenteChanged();
    partial void OnDataInizioChanging(System.DateTime value);
    partial void OnDataInizioChanged();
    partial void OnDataFineChanging(System.DateTime value);
    partial void OnDataFineChanged();
    partial void OnAccettataChanging(bool value);
    partial void OnAccettataChanged();
    #endregion
		
		public Richieste()
		{
			this._Alloggi = default(EntityRef<Alloggi>);
			this._Studenti = default(EntityRef<Studenti>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodAlloggio", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodAlloggio
		{
			get
			{
				return this._CodAlloggio;
			}
			set
			{
				if ((this._CodAlloggio != value))
				{
					if (this._Alloggi.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodAlloggioChanging(value);
					this.SendPropertyChanging();
					this._CodAlloggio = value;
					this.SendPropertyChanged("CodAlloggio");
					this.OnCodAlloggioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodStudente", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CodStudente
		{
			get
			{
				return this._CodStudente;
			}
			set
			{
				if ((this._CodStudente != value))
				{
					if (this._Studenti.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodStudenteChanging(value);
					this.SendPropertyChanging();
					this._CodStudente = value;
					this.SendPropertyChanged("CodStudente");
					this.OnCodStudenteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataInizio", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DataInizio
		{
			get
			{
				return this._DataInizio;
			}
			set
			{
				if ((this._DataInizio != value))
				{
					this.OnDataInizioChanging(value);
					this.SendPropertyChanging();
					this._DataInizio = value;
					this.SendPropertyChanged("DataInizio");
					this.OnDataInizioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataFine", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime DataFine
		{
			get
			{
				return this._DataFine;
			}
			set
			{
				if ((this._DataFine != value))
				{
					this.OnDataFineChanging(value);
					this.SendPropertyChanging();
					this._DataFine = value;
					this.SendPropertyChanged("DataFine");
					this.OnDataFineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accettata", DbType="Bit NOT NULL")]
		public bool Accettata
		{
			get
			{
				return this._Accettata;
			}
			set
			{
				if ((this._Accettata != value))
				{
					this.OnAccettataChanging(value);
					this.SendPropertyChanging();
					this._Accettata = value;
					this.SendPropertyChanged("Accettata");
					this.OnAccettataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Alloggi_Richieste", Storage="_Alloggi", ThisKey="CodAlloggio", OtherKey="CodAlloggio", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Alloggi Alloggi
		{
			get
			{
				return this._Alloggi.Entity;
			}
			set
			{
				Alloggi previousValue = this._Alloggi.Entity;
				if (((previousValue != value) 
							|| (this._Alloggi.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Alloggi.Entity = null;
						previousValue.Richieste.Remove(this);
					}
					this._Alloggi.Entity = value;
					if ((value != null))
					{
						value.Richieste.Add(this);
						this._CodAlloggio = value.CodAlloggio;
					}
					else
					{
						this._CodAlloggio = default(int);
					}
					this.SendPropertyChanged("Alloggi");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studenti_Richieste", Storage="_Studenti", ThisKey="CodStudente", OtherKey="CodStudente", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Studenti Studenti
		{
			get
			{
				return this._Studenti.Entity;
			}
			set
			{
				Studenti previousValue = this._Studenti.Entity;
				if (((previousValue != value) 
							|| (this._Studenti.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Studenti.Entity = null;
						previousValue.Richieste.Remove(this);
					}
					this._Studenti.Entity = value;
					if ((value != null))
					{
						value.Richieste.Add(this);
						this._CodStudente = value.CodStudente;
					}
					else
					{
						this._CodStudente = default(int);
					}
					this.SendPropertyChanged("Studenti");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settori")]
	public partial class Settori : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CodNACE;
		
		private string _Descrizione;
		
		private string _CodCapitolo;
		
		private string _CodSezione;
		
		private string _CodParagrafo;
		
		private EntitySet<Aziende> _Aziende;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodNACEChanging(string value);
    partial void OnCodNACEChanged();
    partial void OnDescrizioneChanging(string value);
    partial void OnDescrizioneChanged();
    partial void OnCodCapitoloChanging(string value);
    partial void OnCodCapitoloChanged();
    partial void OnCodSezioneChanging(string value);
    partial void OnCodSezioneChanged();
    partial void OnCodParagrafoChanging(string value);
    partial void OnCodParagrafoChanged();
    #endregion
		
		public Settori()
		{
			this._Aziende = new EntitySet<Aziende>(new Action<Aziende>(this.attach_Aziende), new Action<Aziende>(this.detach_Aziende));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodNACE", DbType="VarChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CodNACE
		{
			get
			{
				return this._CodNACE;
			}
			set
			{
				if ((this._CodNACE != value))
				{
					this.OnCodNACEChanging(value);
					this.SendPropertyChanging();
					this._CodNACE = value;
					this.SendPropertyChanged("CodNACE");
					this.OnCodNACEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descrizione", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Descrizione
		{
			get
			{
				return this._Descrizione;
			}
			set
			{
				if ((this._Descrizione != value))
				{
					this.OnDescrizioneChanging(value);
					this.SendPropertyChanging();
					this._Descrizione = value;
					this.SendPropertyChanged("Descrizione");
					this.OnDescrizioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodCapitolo", DbType="VarChar(8)")]
		public string CodCapitolo
		{
			get
			{
				return this._CodCapitolo;
			}
			set
			{
				if ((this._CodCapitolo != value))
				{
					this.OnCodCapitoloChanging(value);
					this.SendPropertyChanging();
					this._CodCapitolo = value;
					this.SendPropertyChanged("CodCapitolo");
					this.OnCodCapitoloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodSezione", DbType="VarChar(8)")]
		public string CodSezione
		{
			get
			{
				return this._CodSezione;
			}
			set
			{
				if ((this._CodSezione != value))
				{
					this.OnCodSezioneChanging(value);
					this.SendPropertyChanging();
					this._CodSezione = value;
					this.SendPropertyChanged("CodSezione");
					this.OnCodSezioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodParagrafo", DbType="VarChar(8)")]
		public string CodParagrafo
		{
			get
			{
				return this._CodParagrafo;
			}
			set
			{
				if ((this._CodParagrafo != value))
				{
					this.OnCodParagrafoChanging(value);
					this.SendPropertyChanging();
					this._CodParagrafo = value;
					this.SendPropertyChanged("CodParagrafo");
					this.OnCodParagrafoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Settori_Aziende", Storage="_Aziende", ThisKey="CodNACE", OtherKey="CodNACE")]
		public EntitySet<Aziende> Aziende
		{
			get
			{
				return this._Aziende;
			}
			set
			{
				this._Aziende.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Aziende(Aziende entity)
		{
			this.SendPropertyChanging();
			entity.Settori = this;
		}
		
		private void detach_Aziende(Aziende entity)
		{
			this.SendPropertyChanging();
			entity.Settori = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Studenti")]
	public partial class Studenti : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodStudente;
		
		private string _CF;
		
		private int _NumMatricola;
		
		private string _Universita;
		
		private string _CodCorso;
		
		private short _AnnoImmatricolazione;
		
		private System.Data.Linq.Binary _CV;
		
		private EntitySet<Accordi> _Accordi;
		
		private EntitySet<Candidature> _Candidature;
		
		private EntitySet<Prenotazioni> _Prenotazioni;
		
		private EntitySet<Richieste> _Richieste;
		
		private EntityRef<Persone> _Persone;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodStudenteChanging(int value);
    partial void OnCodStudenteChanged();
    partial void OnCFChanging(string value);
    partial void OnCFChanged();
    partial void OnNumMatricolaChanging(int value);
    partial void OnNumMatricolaChanged();
    partial void OnUniversitaChanging(string value);
    partial void OnUniversitaChanged();
    partial void OnCodCorsoChanging(string value);
    partial void OnCodCorsoChanged();
    partial void OnAnnoImmatricolazioneChanging(short value);
    partial void OnAnnoImmatricolazioneChanged();
    partial void OnCVChanging(System.Data.Linq.Binary value);
    partial void OnCVChanged();
    #endregion
		
		public Studenti()
		{
			this._Accordi = new EntitySet<Accordi>(new Action<Accordi>(this.attach_Accordi), new Action<Accordi>(this.detach_Accordi));
			this._Candidature = new EntitySet<Candidature>(new Action<Candidature>(this.attach_Candidature), new Action<Candidature>(this.detach_Candidature));
			this._Prenotazioni = new EntitySet<Prenotazioni>(new Action<Prenotazioni>(this.attach_Prenotazioni), new Action<Prenotazioni>(this.detach_Prenotazioni));
			this._Richieste = new EntitySet<Richieste>(new Action<Richieste>(this.attach_Richieste), new Action<Richieste>(this.detach_Richieste));
			this._Persone = default(EntityRef<Persone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodStudente", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodStudente
		{
			get
			{
				return this._CodStudente;
			}
			set
			{
				if ((this._CodStudente != value))
				{
					this.OnCodStudenteChanging(value);
					this.SendPropertyChanging();
					this._CodStudente = value;
					this.SendPropertyChanged("CodStudente");
					this.OnCodStudenteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CF", DbType="Char(16) NOT NULL", CanBeNull=false)]
		public string CF
		{
			get
			{
				return this._CF;
			}
			set
			{
				if ((this._CF != value))
				{
					if (this._Persone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCFChanging(value);
					this.SendPropertyChanging();
					this._CF = value;
					this.SendPropertyChanged("CF");
					this.OnCFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumMatricola", DbType="Int NOT NULL")]
		public int NumMatricola
		{
			get
			{
				return this._NumMatricola;
			}
			set
			{
				if ((this._NumMatricola != value))
				{
					this.OnNumMatricolaChanging(value);
					this.SendPropertyChanging();
					this._NumMatricola = value;
					this.SendPropertyChanged("NumMatricola");
					this.OnNumMatricolaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Universita", DbType="Char(64) NOT NULL", CanBeNull=false)]
		public string Universita
		{
			get
			{
				return this._Universita;
			}
			set
			{
				if ((this._Universita != value))
				{
					this.OnUniversitaChanging(value);
					this.SendPropertyChanging();
					this._Universita = value;
					this.SendPropertyChanged("Universita");
					this.OnUniversitaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodCorso", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string CodCorso
		{
			get
			{
				return this._CodCorso;
			}
			set
			{
				if ((this._CodCorso != value))
				{
					this.OnCodCorsoChanging(value);
					this.SendPropertyChanging();
					this._CodCorso = value;
					this.SendPropertyChanged("CodCorso");
					this.OnCodCorsoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnoImmatricolazione", DbType="SmallInt NOT NULL")]
		public short AnnoImmatricolazione
		{
			get
			{
				return this._AnnoImmatricolazione;
			}
			set
			{
				if ((this._AnnoImmatricolazione != value))
				{
					this.OnAnnoImmatricolazioneChanging(value);
					this.SendPropertyChanging();
					this._AnnoImmatricolazione = value;
					this.SendPropertyChanged("AnnoImmatricolazione");
					this.OnAnnoImmatricolazioneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CV", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary CV
		{
			get
			{
				return this._CV;
			}
			set
			{
				if ((this._CV != value))
				{
					this.OnCVChanging(value);
					this.SendPropertyChanging();
					this._CV = value;
					this.SendPropertyChanged("CV");
					this.OnCVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studenti_Accordi", Storage="_Accordi", ThisKey="CodStudente", OtherKey="CodStudente")]
		public EntitySet<Accordi> Accordi
		{
			get
			{
				return this._Accordi;
			}
			set
			{
				this._Accordi.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studenti_Candidature", Storage="_Candidature", ThisKey="CodStudente", OtherKey="CodStudente")]
		public EntitySet<Candidature> Candidature
		{
			get
			{
				return this._Candidature;
			}
			set
			{
				this._Candidature.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studenti_Prenotazioni", Storage="_Prenotazioni", ThisKey="CodStudente", OtherKey="CodStudente")]
		public EntitySet<Prenotazioni> Prenotazioni
		{
			get
			{
				return this._Prenotazioni;
			}
			set
			{
				this._Prenotazioni.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Studenti_Richieste", Storage="_Richieste", ThisKey="CodStudente", OtherKey="CodStudente")]
		public EntitySet<Richieste> Richieste
		{
			get
			{
				return this._Richieste;
			}
			set
			{
				this._Richieste.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persone_Studenti", Storage="_Persone", ThisKey="CF", OtherKey="CF", IsForeignKey=true)]
		public Persone Persone
		{
			get
			{
				return this._Persone.Entity;
			}
			set
			{
				Persone previousValue = this._Persone.Entity;
				if (((previousValue != value) 
							|| (this._Persone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persone.Entity = null;
						previousValue.Studenti.Remove(this);
					}
					this._Persone.Entity = value;
					if ((value != null))
					{
						value.Studenti.Add(this);
						this._CF = value.CF;
					}
					else
					{
						this._CF = default(string);
					}
					this.SendPropertyChanged("Persone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accordi(Accordi entity)
		{
			this.SendPropertyChanging();
			entity.Studenti = this;
		}
		
		private void detach_Accordi(Accordi entity)
		{
			this.SendPropertyChanging();
			entity.Studenti = null;
		}
		
		private void attach_Candidature(Candidature entity)
		{
			this.SendPropertyChanging();
			entity.Studenti = this;
		}
		
		private void detach_Candidature(Candidature entity)
		{
			this.SendPropertyChanging();
			entity.Studenti = null;
		}
		
		private void attach_Prenotazioni(Prenotazioni entity)
		{
			this.SendPropertyChanging();
			entity.Studenti = this;
		}
		
		private void detach_Prenotazioni(Prenotazioni entity)
		{
			this.SendPropertyChanging();
			entity.Studenti = null;
		}
		
		private void attach_Richieste(Richieste entity)
		{
			this.SendPropertyChanging();
			entity.Studenti = this;
		}
		
		private void detach_Richieste(Richieste entity)
		{
			this.SendPropertyChanging();
			entity.Studenti = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tipologie")]
	public partial class Tipologie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CodTipologia;
		
		private string _Nome;
		
		private EntitySet<Alloggi> _Alloggi;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodTipologiaChanging(string value);
    partial void OnCodTipologiaChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public Tipologie()
		{
			this._Alloggi = new EntitySet<Alloggi>(new Action<Alloggi>(this.attach_Alloggi), new Action<Alloggi>(this.detach_Alloggi));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTipologia", DbType="VarChar(4) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CodTipologia
		{
			get
			{
				return this._CodTipologia;
			}
			set
			{
				if ((this._CodTipologia != value))
				{
					this.OnCodTipologiaChanging(value);
					this.SendPropertyChanging();
					this._CodTipologia = value;
					this.SendPropertyChanged("CodTipologia");
					this.OnCodTipologiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tipologie_Alloggi", Storage="_Alloggi", ThisKey="CodTipologia", OtherKey="CodTipologia")]
		public EntitySet<Alloggi> Alloggi
		{
			get
			{
				return this._Alloggi;
			}
			set
			{
				this._Alloggi.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alloggi(Alloggi entity)
		{
			this.SendPropertyChanging();
			entity.Tipologie = this;
		}
		
		private void detach_Alloggi(Alloggi entity)
		{
			this.SendPropertyChanging();
			entity.Tipologie = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tirocini")]
	public partial class Tirocini : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CodTirocinio;
		
		private string _Titolo;
		
		private string _Stato;
		
		private string _Citta;
		
		private string _CodPostale;
		
		private string _Via;
		
		private int _NumCivico;
		
		private byte _PostiDisponibili;
		
		private System.DateTime _InizioPeriodo;
		
		private System.DateTime _FinePeriodo;
		
		private byte _MinDurata;
		
		private System.DateTime _DataScadenza;
		
		private System.Nullable<decimal> _Stipendio;
		
		private int _CodVAT;
		
		private EntitySet<Accordi> _Accordi;
		
		private EntitySet<Candidature> _Candidature;
		
		private EntitySet<Coperture> _Coperture;
		
		private EntityRef<Aziende> _Aziende;
		
    #region Definizioni metodo Extensibility
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodTirocinioChanging(int value);
    partial void OnCodTirocinioChanged();
    partial void OnTitoloChanging(string value);
    partial void OnTitoloChanged();
    partial void OnStatoChanging(string value);
    partial void OnStatoChanged();
    partial void OnCittaChanging(string value);
    partial void OnCittaChanged();
    partial void OnCodPostaleChanging(string value);
    partial void OnCodPostaleChanged();
    partial void OnViaChanging(string value);
    partial void OnViaChanged();
    partial void OnNumCivicoChanging(int value);
    partial void OnNumCivicoChanged();
    partial void OnPostiDisponibiliChanging(byte value);
    partial void OnPostiDisponibiliChanged();
    partial void OnInizioPeriodoChanging(System.DateTime value);
    partial void OnInizioPeriodoChanged();
    partial void OnFinePeriodoChanging(System.DateTime value);
    partial void OnFinePeriodoChanged();
    partial void OnMinDurataChanging(byte value);
    partial void OnMinDurataChanged();
    partial void OnDataScadenzaChanging(System.DateTime value);
    partial void OnDataScadenzaChanged();
    partial void OnStipendioChanging(System.Nullable<decimal> value);
    partial void OnStipendioChanged();
    partial void OnCodVATChanging(int value);
    partial void OnCodVATChanged();
    #endregion
		
		public Tirocini()
		{
			this._Accordi = new EntitySet<Accordi>(new Action<Accordi>(this.attach_Accordi), new Action<Accordi>(this.detach_Accordi));
			this._Candidature = new EntitySet<Candidature>(new Action<Candidature>(this.attach_Candidature), new Action<Candidature>(this.detach_Candidature));
			this._Coperture = new EntitySet<Coperture>(new Action<Coperture>(this.attach_Coperture), new Action<Coperture>(this.detach_Coperture));
			this._Aziende = default(EntityRef<Aziende>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodTirocinio", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CodTirocinio
		{
			get
			{
				return this._CodTirocinio;
			}
			set
			{
				if ((this._CodTirocinio != value))
				{
					this.OnCodTirocinioChanging(value);
					this.SendPropertyChanging();
					this._CodTirocinio = value;
					this.SendPropertyChanged("CodTirocinio");
					this.OnCodTirocinioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titolo", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Titolo
		{
			get
			{
				return this._Titolo;
			}
			set
			{
				if ((this._Titolo != value))
				{
					this.OnTitoloChanging(value);
					this.SendPropertyChanging();
					this._Titolo = value;
					this.SendPropertyChanged("Titolo");
					this.OnTitoloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stato", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Stato
		{
			get
			{
				return this._Stato;
			}
			set
			{
				if ((this._Stato != value))
				{
					this.OnStatoChanging(value);
					this.SendPropertyChanging();
					this._Stato = value;
					this.SendPropertyChanged("Stato");
					this.OnStatoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Citta", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Citta
		{
			get
			{
				return this._Citta;
			}
			set
			{
				if ((this._Citta != value))
				{
					this.OnCittaChanging(value);
					this.SendPropertyChanging();
					this._Citta = value;
					this.SendPropertyChanged("Citta");
					this.OnCittaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodPostale", DbType="VarChar(16) NOT NULL", CanBeNull=false)]
		public string CodPostale
		{
			get
			{
				return this._CodPostale;
			}
			set
			{
				if ((this._CodPostale != value))
				{
					this.OnCodPostaleChanging(value);
					this.SendPropertyChanging();
					this._CodPostale = value;
					this.SendPropertyChanged("CodPostale");
					this.OnCodPostaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Via", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Via
		{
			get
			{
				return this._Via;
			}
			set
			{
				if ((this._Via != value))
				{
					this.OnViaChanging(value);
					this.SendPropertyChanging();
					this._Via = value;
					this.SendPropertyChanged("Via");
					this.OnViaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumCivico", DbType="Int NOT NULL")]
		public int NumCivico
		{
			get
			{
				return this._NumCivico;
			}
			set
			{
				if ((this._NumCivico != value))
				{
					this.OnNumCivicoChanging(value);
					this.SendPropertyChanging();
					this._NumCivico = value;
					this.SendPropertyChanged("NumCivico");
					this.OnNumCivicoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostiDisponibili", DbType="TinyInt NOT NULL")]
		public byte PostiDisponibili
		{
			get
			{
				return this._PostiDisponibili;
			}
			set
			{
				if ((this._PostiDisponibili != value))
				{
					this.OnPostiDisponibiliChanging(value);
					this.SendPropertyChanging();
					this._PostiDisponibili = value;
					this.SendPropertyChanged("PostiDisponibili");
					this.OnPostiDisponibiliChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InizioPeriodo", DbType="Date NOT NULL")]
		public System.DateTime InizioPeriodo
		{
			get
			{
				return this._InizioPeriodo;
			}
			set
			{
				if ((this._InizioPeriodo != value))
				{
					this.OnInizioPeriodoChanging(value);
					this.SendPropertyChanging();
					this._InizioPeriodo = value;
					this.SendPropertyChanged("InizioPeriodo");
					this.OnInizioPeriodoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinePeriodo", DbType="Date NOT NULL")]
		public System.DateTime FinePeriodo
		{
			get
			{
				return this._FinePeriodo;
			}
			set
			{
				if ((this._FinePeriodo != value))
				{
					this.OnFinePeriodoChanging(value);
					this.SendPropertyChanging();
					this._FinePeriodo = value;
					this.SendPropertyChanged("FinePeriodo");
					this.OnFinePeriodoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinDurata", DbType="TinyInt NOT NULL")]
		public byte MinDurata
		{
			get
			{
				return this._MinDurata;
			}
			set
			{
				if ((this._MinDurata != value))
				{
					this.OnMinDurataChanging(value);
					this.SendPropertyChanging();
					this._MinDurata = value;
					this.SendPropertyChanged("MinDurata");
					this.OnMinDurataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataScadenza", DbType="Date NOT NULL")]
		public System.DateTime DataScadenza
		{
			get
			{
				return this._DataScadenza;
			}
			set
			{
				if ((this._DataScadenza != value))
				{
					this.OnDataScadenzaChanging(value);
					this.SendPropertyChanging();
					this._DataScadenza = value;
					this.SendPropertyChanged("DataScadenza");
					this.OnDataScadenzaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stipendio", DbType="SmallMoney")]
		public System.Nullable<decimal> Stipendio
		{
			get
			{
				return this._Stipendio;
			}
			set
			{
				if ((this._Stipendio != value))
				{
					this.OnStipendioChanging(value);
					this.SendPropertyChanging();
					this._Stipendio = value;
					this.SendPropertyChanged("Stipendio");
					this.OnStipendioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodVAT", DbType="Int NOT NULL")]
		public int CodVAT
		{
			get
			{
				return this._CodVAT;
			}
			set
			{
				if ((this._CodVAT != value))
				{
					if (this._Aziende.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCodVATChanging(value);
					this.SendPropertyChanging();
					this._CodVAT = value;
					this.SendPropertyChanged("CodVAT");
					this.OnCodVATChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tirocini_Accordi", Storage="_Accordi", ThisKey="CodTirocinio", OtherKey="CodTirocinio")]
		public EntitySet<Accordi> Accordi
		{
			get
			{
				return this._Accordi;
			}
			set
			{
				this._Accordi.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tirocini_Candidature", Storage="_Candidature", ThisKey="CodTirocinio", OtherKey="CodTirocinio")]
		public EntitySet<Candidature> Candidature
		{
			get
			{
				return this._Candidature;
			}
			set
			{
				this._Candidature.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tirocini_Coperture", Storage="_Coperture", ThisKey="CodTirocinio", OtherKey="CodTirocinio")]
		public EntitySet<Coperture> Coperture
		{
			get
			{
				return this._Coperture;
			}
			set
			{
				this._Coperture.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Aziende_Tirocini", Storage="_Aziende", ThisKey="CodVAT", OtherKey="CodVAT", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Aziende Aziende
		{
			get
			{
				return this._Aziende.Entity;
			}
			set
			{
				Aziende previousValue = this._Aziende.Entity;
				if (((previousValue != value) 
							|| (this._Aziende.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Aziende.Entity = null;
						previousValue.Tirocini.Remove(this);
					}
					this._Aziende.Entity = value;
					if ((value != null))
					{
						value.Tirocini.Add(this);
						this._CodVAT = value.CodVAT;
					}
					else
					{
						this._CodVAT = default(int);
					}
					this.SendPropertyChanged("Aziende");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accordi(Accordi entity)
		{
			this.SendPropertyChanging();
			entity.Tirocini = this;
		}
		
		private void detach_Accordi(Accordi entity)
		{
			this.SendPropertyChanging();
			entity.Tirocini = null;
		}
		
		private void attach_Candidature(Candidature entity)
		{
			this.SendPropertyChanging();
			entity.Tirocini = this;
		}
		
		private void detach_Candidature(Candidature entity)
		{
			this.SendPropertyChanging();
			entity.Tirocini = null;
		}
		
		private void attach_Coperture(Coperture entity)
		{
			this.SendPropertyChanging();
			entity.Tirocini = this;
		}
		
		private void detach_Coperture(Coperture entity)
		{
			this.SendPropertyChanging();
			entity.Tirocini = null;
		}
	}
}
#pragma warning restore 1591
